<?xml version="1.0" encoding="UTF-8"?>
<chapter id="pandoc">
	<title>pandoc - general markup converter</title>
	<para>https://pandoc.org</para>
	<section>
		<title>安装</title>
		<para>Linux</para>
		<screen>
		<![CDATA[
dnf install pandoc		
		]]>
		</screen>
		<para>MacOS</para>
		<screen>
		<![CDATA[
brew install pandoc		
		]]>
		</screen>
	</section>
	<section id="docbook2markdown">
		<title>Docbook to Markdown</title>
		<screen>
		<![CDATA[
pandoc -f docbook -t markdown -s howto.xml -o example.text
		]]>
		</screen>
	</section>
	<section id="markdown2html">
		<title>Markdown to HTML</title>
		<screen>
		<![CDATA[
pandoc -f markdown -t html5 -s example.md -o example.html		
		]]>
		</screen>
		<example>
			<title>Makefile</title>
			<screen>
			<![CDATA[
PANDOC = pandoc
PANDOCOPTS = -f markdown -t html5
PREFIX=..
HTML := $(patsubst %.md,%.html,$(wildcard *.md))

all: $(HTML)
	
%.html: %.md 
	$(PANDOC) $(PANDOCOPTS) -s $< -o $(PREFIX)/$@

clean:
	@rm -rf $(PREFIX)/*.html
	
rebuild : clean all					
			]]>
			</screen>
		</example>
	</section>
	<section id="pandoc.markdown">
		<title>Markdown 转 Office 文档</title>
		<section>
			<title>Office 制作模版</title>
			<para>从已存在文件制作模版</para>
			<screen>
			<![CDATA[
pandoc -o template.docx --print-default-data-file reference.docx
pandoc -o template.pptx --print-default-data-file reference.pptx
			]]>
			</screen>
			<para>输出文件</para>
			<screen>
			<![CDATA[
pandoc -f markdown -t docx --reference-doc=template.docx -o test.docx test.md
pandoc -f markdown -t pptx --reference-doc=template.pptx -o test.pptx test.md
			]]>
			</screen>
			<para>早起 office 使用 dotx 和 potx</para>
			<screen>
			<![CDATA[
pandoc -o template.dotx --print-default-data-file reference.docx
pandoc -o template.potx --print-default-data-file reference.pptx
			]]>
			</screen>
			<para>输出文件</para>
			<screen>
			<![CDATA[
pandoc -f markdown -t docx --reference-doc=template.dotx -o test.docx test.md
pandoc -f markdown -t pptx --reference-doc=template.potx -o test.pptx test.md
			]]>
			</screen>
		</section>
		<section>
			<title>Word 目录</title>
			<para>目录参数 --toc</para>
			<para>目录深度 --toc-depth=3</para>
			<screen>
			<![CDATA[
pandoc -f markdown -t docx --reference-doc=template.dotx --toc --toc-depth=3 -o test.docx test.md
			]]>
			</screen>
			<para>设置目录标题</para>
			<screen>
			<![CDATA[
pandoc input.md -o output.docx --toc -M toc-title="目录" title="SSS"
			]]>
			</screen>
			<para>参考文献</para>
			<screen>
			<![CDATA[
pandoc --citeproc --number-sections \
--csl gb-t-7714-2015-numeric-bilingual-no-uppercase-no-url-doi.csl \
--bibliography ref.bib -M reference-section-title="参考文献" \
-M link-citations=true --reference-doc=ref.docx -s input.md -o main.docx			
			]]>
			</screen>
			<section>
				<title>设置目录标题</title>
				<programlisting>
				<![CDATA[
---
toc-title: "内容目录"
lang: zh-CN
---				
				]]>
				</programlisting>
			</section>			
			<section>
				<title>标题和作者</title>
				<para>方案一</para>
				<screen>
				<![CDATA[
neo@netkiller neo % pandoc -f markdown -t docx --reference-doc=../template/template.dotx --toc --toc-depth=3  -M toc-title="目录" -M title="文档标题" -o test.docx test.md				
				]]>
				</screen>
				<para>方案二，向 markdown 文件中添加声明</para>
				<programlisting>
				<![CDATA[
---
title:  'This is the title: it contains a colon'
author:
- Author One
- Author Two
keywords: [nothing, nothingness]
abstract: |
  This is the abstract.

  It consists of two paragraphs.
---
				]]>
				</programlisting>
			</section>
		</section>
		<section>
			<title>PPT 幻灯片大纲深度</title>
			<screen>
			<![CDATA[
pandoc -f markdown -t pptx --reference-doc=template.potx --slide-level=2 -o test.pptx test.md			
			]]>
			</screen>
		</section>
		
	</section>
	<section id="pypandoc">
		<title>pypandoc</title>
		<screen>
		<![CDATA[
pip install pypandoc
pip install pypandoc_binary		
		]]>
		</screen>
		<programlisting>
		<![CDATA[
#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################
# Home	: https://www.netkiller.cn
# Author: Neo <netkiller@msn.com>
# Upgrade: 2025-06-20
##############################################
import os.path

try:
    import uvicorn, logging
    from typing import Union
    from fastapi import FastAPI
    from fastapi.params import Form
    from fastapi.responses import FileResponse
    import uuid
    import pypandoc
    # import os
    # os.environ.setdefault('PYPANDOC_PANDOC', '/home/x/whatever/pandoc')
except ImportError as err:
    print("Import Error: %s" % (err))
    exit()

app = FastAPI()

workdir = "/tmp/doc"
if not os.path.exists(workdir):
    os.makedirs(workdir)

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.post("/markdown/{appid}/{device}/word")
async def word(markdown: str = Form()):

    filename = uuid.uuid1()
    input_file=f"/{workdir}/{filename}.md"
    output_file = f"/{workdir}/{filename}.docx"
    with open(input_file,'w') as file:
        file.write(markdown)

    pypandoc.convert_file(input_file, 'docx', format="markdown", outputfile=output_file)
    # media_type = "application/msword"
    media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    return FileResponse(output_file,media_type=media_type, filename=os.path.basename(output_file))

@app.post("/markdown/{appid}/{device}/ppt")
async def powerpoint(markdown: str = Form()):

    filename = uuid.uuid1()
    input_file=f"/{workdir}/{filename}.md"
    output_file = f"/{workdir}/{filename}.pptx"
    with open(input_file,'w') as file:
        file.write(markdown)

    pypandoc.convert_file(input_file, 'pptx', format="markdown", outputfile=output_file)
    # media_type = "application/vnd.ms-powerpoint"
    media_type = "application/vnd.openxmlformats-officedocument.presentationml.presentation"
    return FileResponse(output_file,media_type=media_type, filename=os.path.basename(output_file))

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    try:
        # uvicorn.run('main:app', port=8000, reload=True)
        uvicorn.run(app="main:app", host="0.0.0.0", port=8080, log_level="info")
    except KeyboardInterrupt:
        print("Crtl+C Pressed. Shutting down.")		
		]]>
		</programlisting>
		<para></para>
		<screen>
		<![CDATA[
uvicorn main:app --reload 		
		]]>
		</screen>
	</section>
</chapter>
